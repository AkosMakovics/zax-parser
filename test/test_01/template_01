sizeof(json_string)1000
{"x":7, "b":true, "with_letters":"seven 最高の夏をあ❤", "weights":[1, 2, 3]}
{"x":0, "b":false, "with_letters":"seven 最高の夏をあ❤", "weights":[]}
{"x":11, "b":true, "with_letters":"seven 最高の夏をあ❤", "weights":[1, 2, 3]}
{"int1":11, "int2":7, "string1":"eleven", "string2":"seven"}
{"int1":11, "int2":7, "string1":"eleven", "string2":"seven"}
{"title":"some other title", "options":["option1", "option2", "option3"], "criteria":["criteria1", "criteria2"], "scores":[[1, 2, 3], [7, 8, 9]], "x":17, "inside":{"x":9, "y":11}, "weights":[1, 2, 3]}
some_obj.inside.x: 11
some_obj.inside.x2 : {"title":"test bible title", "options":["option 1", "option 2", "option 3"], "criteria":["criteria1", "criteria2"], "scores":[[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]], "x":6, "inside":{"x":11, "y":7}, "weights":[]}
{"title":"test bible title", "options":["option 1", "option 2", "option 3"], "criteria":["criteria1", "criteria2"], "scores":[[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]], "x":6, "inside":{"x":11, "y":7}, "weights":[]}

{"title":"test bible title", "options":["option 1", "option 2", "option 3"], "criteria":["criteria1", "criteria2"], "scores":[[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]], "x":6, "inside":{"x":9, "y":11}, "weights":[1, 2, 3, 4]}

Json string to be assigned to object:
{"x":99, "criteria":["aspect x"], "title":"test title", "options":["option 1", "option 2", "option 3"], "nonexisting_field":"", "scores":[[1, 1, 2], [3, 5, 8], [13, 21], [34, 55]], "weights":[4, 3, 2, 1], "inside":{"x":"11", "y":"9"}}

Values before assignment: 
{"title":"some title", "options":["option1", "option2", "option3"], "criteria":["criteria1", "criteria2"], "scores":[[1, 2, 3], [7, 8, 9]], "x":6, "inside":{"x":11, "y":7}, "weights":[1, 2, 3]}

Json string computed after assignment: 
{"title":"test title", "options":["option 1", "option 2", "option 3"], "criteria":["aspect x"], "scores":[[1, 1, 2], [3, 5, 8], [13, 21], [34, 55]], "x":99, "inside":{"x":11, "y":9}, "weights":[4, 3, 2, 1]}

some title
17
0
3
7
11
{"x":99, "options":["1", "2", "3"]}
{"x":99, "options":[]}
{"x":17, "title":"test title", "scores":[[1, 1, 2], [3, 5, 8], [13, 21], [34, 55]]}
{"x":17, "dmap":{"BBB":9.900000}, "title":"test", "scores":[[1, 1, 2], [3], [5, 8], [13, 21]]}
{"assets":{"Marquez":"Semantic dementia"}}
{"x":17, "scores":[[11, 12, 13], [14, 15, 16]]}
{"x":9, "scores":[[1, 2, 3], [4, 5, 6]]}
{"x":7, "dmap":{"AAA":5.500000, "BBB":7.600000}}
objE: {"some_info":{"x":4, "y":5.600000, "name":"new name"}}
objF: {"some_info":{"name":"new name", "x":"4", "y":"5.6"}}
{"assets":{"Darth Vader":"Death Star", "Lyra Belacqua":"Alethiometer"}}
{"x":9, "scores":[[1, 2, 3], [4, 5, 6]]}
{"x":9, "title":"some title", "scores":[{"x":11, "y":7}, {"x":11, "y":7}]}
{"x":17, "title":"new title", "scores":[{"x":1, "y":2}, {"x":3, "y":4}]}
{
    "assets":{
        "Darth Vader":"Death Star",
        "Lyra Belacqua":"Alethiometer",
        "Marquez":"Semantic dementia"
    }
}
Testing whitespaces after an integer:
123 65533
12 65534
0 65534
123 65535
123 65535
123 65535
123 3
123 156
123 10018
123 0
ERROR: error parsing uint16_t in JSON, out of range: '65536   '
ERROR: error parsing uint16_t in JSON, out of range: '65536   '
ERROR: error parsing uint16_t in JSON, out of range: '-2   '
Testing errors when values are lower than the accepted range:
ERROR: error parsing int8_t in JSON, out of range: '-130'
ERROR: error parsing int16_t in JSON, out of range: '-32770'
ERROR: error parsing uint16_t in JSON, out of range: '-304'
ERROR: error parsing int32_t in JSON: 'Result too large: -2147483650'
ERROR: error parsing uint32_t in JSON: 'No error: -2'
ERROR: error parsing int64_t in JSON: 'Result too large: -9223372036854775810'
ERROR: error parsing uint64_t in JSON: 'No error: -5'
Testing errors when values are higher than the accepted range:
ERROR: error parsing int8_t in JSON, out of range: '130'
ERROR: error parsing int16_t in JSON, out of range: '32770'
ERROR: error parsing uint16_t in JSON, out of range: '65539'
ERROR: error parsing int32_t in JSON: 'Result too large: 2147483650'
ERROR: error parsing uint32_t in JSON: 'Result too large: 4294967299'
ERROR: error parsing int64_t in JSON: 'Result too large: 9223372036854775810'
ERROR: error parsing uint64_t in JSON: 'Result too large: 18446744073709551620'
Testing errors when values are invalid for whole numbers:
32 6 214 42 92233720368 4
Testing errors when values are invalid:
13.24 32
ERROR: 'notaboolean' is not a boolean
